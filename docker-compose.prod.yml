# Docker Compose V2 Configuration for Docker MCP Web Manager
# Production Environment Configuration

version: '3.9'

services:
  # データベース移行サービス（本番環境用）
  db-migrate:
    build:
      context: .
      target: builder
    volumes:
      - app-data:/app/data
    environment:
      - DATABASE_URL=file:/app/data/app.db
      - NODE_ENV=production
    command: >
      sh -c "
        mkdir -p /app/data && 
        chown -R 1000:1000 /app/data && 
        chmod 750 /app/data &&
        npx drizzle-kit generate --dialect=sqlite --schema=./src/db/schema.ts --out=/app/data/out/migrations &&
        npx drizzle-kit migrate --dialect=sqlite --url=file:/app/data/app.db --config=./drizzle.config.ts
      "
    restart: "no"
    user: "1000:1000"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    networks:
      - app-network

  # メインWebアプリケーション（本番環境）
  web:
    build:
      context: .
      target: production
    ports:
      - "${WEB_PORT:-3000}:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=file:/app/data/app.db
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - SERVER_RATE_USER_RPM=${SERVER_RATE_USER_RPM:-1000}
      - SERVER_SSE_HEARTBEAT_INTERVAL=${SERVER_SSE_HEARTBEAT_INTERVAL:-30000}
      - SERVER_SSE_CLIENT_TIMEOUT=${SERVER_SSE_CLIENT_TIMEOUT:-60000}
      - SERVER_SSE_MAX_CONNECTIONS=${SERVER_SSE_MAX_CONNECTIONS:-100}
      - SERVER_SSE_MAX_LINE_LENGTH=${SERVER_SSE_MAX_LINE_LENGTH:-10240}
      - SERVER_SSE_RATE_LIMIT=${SERVER_SSE_RATE_LIMIT:-100}
      - SERVER_SSE_MEMORY_CAP=${SERVER_SSE_MEMORY_CAP:-52428800}
      - SERVER_SSE_PAGE_SIZE=${SERVER_SSE_PAGE_SIZE:-1000}
      - SERVER_LOG_RETENTION_DAYS=${SERVER_LOG_RETENTION_DAYS:-30}
      - SERVER_LOG_ROTATION_SIZE=${SERVER_LOG_ROTATION_SIZE:-104857600}
      - SERVER_LOG_ROTATION_INTERVAL=${SERVER_LOG_ROTATION_INTERVAL:-daily}
    volumes:
      - app-data:/app/data
    depends_on:
      db-migrate:
        condition: service_completed_successfully
    restart: unless-stopped
    user: "1000:1000"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1)).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    # 本番環境でのリソース制限
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis (本番環境設定)
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    user: "999:999"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx リバースプロキシ（本番環境のみ）
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - web
    restart: unless-stopped
    user: "101:101"
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# 永続化ボリューム（本番環境）
volumes:
  app-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}
  redis-data:
    driver: local
  nginx-logs:
    driver: local

# ネットワーク設定
networks:
  app-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: mcp-web-prod-bridge