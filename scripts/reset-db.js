#!/usr/bin/env node

/**
 * „Éá„Éº„Çø„Éô„Éº„Çπ„É™„Çª„ÉÉ„Éà„Çπ„ÇØ„É™„Éó„Éà
 * ÈñãÁô∫Áí∞Â¢É„Åß„Éá„Éº„Çø„Éô„Éº„Çπ„ÇíÂÆåÂÖ®„Å´„É™„Çª„ÉÉ„Éà„Åô„Çã
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Áí∞Â¢É„ÉÅ„Çß„ÉÉ„ÇØ
const isProduction = process.env.NODE_ENV === 'production';

async function main() {
  console.log('‚ö†Ô∏è  Database Reset Script\n');

  // Êú¨Áï™Áí∞Â¢É„Åß„ÅØÂÆüË°å„ÇíÊãíÂê¶
  if (isProduction) {
    console.error('‚ùå This script cannot be run in production environment!');
    process.exit(1);
  }

  // „É¶„Éº„Ç∂„ÉºÁ¢∫Ë™ç
  const confirmed = await confirmReset();
  if (!confirmed) {
    console.log('üö´ Database reset cancelled.');
    return;
  }

  try {
    // „Éá„Éº„Çø„Éô„Éº„Çπ„Éï„Ç°„Ç§„É´„ÅÆ„Éë„Çπ„ÇíÂèñÂæó
    const databaseUrl = process.env.DATABASE_URL || 'sqlite:./data/app.db';
    const dbPath = databaseUrl.replace('sqlite:', '');
    const absoluteDbPath = path.resolve(dbPath);

    console.log(`üóÇÔ∏è  Database path: ${absoluteDbPath}`);

    // „Éá„Éº„Çø„Éô„Éº„Çπ„Éï„Ç°„Ç§„É´„ÅåÂ≠òÂú®„Åô„Çã„ÅãÁ¢∫Ë™ç
    if (fs.existsSync(absoluteDbPath)) {
      console.log('üóëÔ∏è  Removing existing database file...');
      fs.unlinkSync(absoluteDbPath);
      console.log('‚úÖ Database file removed');
    } else {
      console.log('‚ÑπÔ∏è  Database file does not exist');
    }

    // WAL„Éï„Ç°„Ç§„É´„Å®SHM„Éï„Ç°„Ç§„É´„ÇÇÂâäÈô§
    const walPath = `${absoluteDbPath}-wal`;
    const shmPath = `${absoluteDbPath}-shm`;

    if (fs.existsSync(walPath)) {
      fs.unlinkSync(walPath);
      console.log('‚úÖ WAL file removed');
    }

    if (fs.existsSync(shmPath)) {
      fs.unlinkSync(shmPath);
      console.log('‚úÖ SHM file removed');
    }

    // „Éá„Éº„Çø„Éô„Éº„Çπ„ÇíÂÜçÂàùÊúüÂåñ
    console.log('\nüîÑ Reinitializing database...');
    const { main: migrate } = require('./migrate');
    await migrate();

    console.log('\nüéâ Database reset completed successfully!');
    console.log('\nüí° Next steps:');
    console.log('   1. Run `npm run db:seed` to add sample data');
    console.log('   2. Start the development server with `npm run dev`');

  } catch (error) {
    console.error('\n‚ùå Database reset failed:', error.message);
    if (error.cause) {
      console.error('   Cause:', error.cause.message || error.cause);
    }
    process.exit(1);
  }
}

/**
 * „É¶„Éº„Ç∂„Éº„Å´Á¢∫Ë™ç„ÇíÊ±Ç„ÇÅ„Çã
 */
async function confirmReset() {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });

  return new Promise((resolve) => {
    console.log('‚ö†Ô∏è  This will completely remove all data from the database!');
    console.log('   - All servers will be deleted');
    console.log('   - All configurations will be lost');
    console.log('   - All user data will be removed');
    console.log('   - All test results will be deleted\n');

    rl.question('Are you sure you want to continue? (yes/no): ', (answer) => {
      rl.close();
      const confirmed = answer.toLowerCase() === 'yes' || answer.toLowerCase() === 'y';
      resolve(confirmed);
    });
  });
}

// „Çπ„ÇØ„É™„Éó„Éà„ÅåÁõ¥Êé•ÂÆüË°å„Åï„Çå„ÅüÂ†¥Âêà„ÅÆ„Åø„É°„Ç§„É≥Èñ¢Êï∞„ÇíÂÆüË°å
if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå Unexpected error:', error);
    process.exit(1);
  });
}

module.exports = { main };