#!/usr/bin/env node

/**
 * „Éá„Éº„Çø„Éô„Éº„Çπ„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥„Çπ„ÇØ„É™„Éó„Éà
 * „Éá„Éº„Çø„Éô„Éº„Çπ„ÅÆÂàùÊúüÂåñ„Å®„Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥„ÇíÂÆüË°å
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// TypeScript„Éï„Ç°„Ç§„É´„Çí„Ç≥„É≥„Éë„Ç§„É´„Åó„Å¶„Åã„ÇâÂÆüË°å
const isTS = process.env.NODE_ENV === 'development' && fs.existsSync('tsconfig.json');

async function main() {
  console.log('üöÄ Starting database migration...\n');

  try {
    // TypeScriptÁí∞Â¢É„ÅÆÂ†¥Âêà„ÅØts-node„Çí‰ΩøÁî®
    if (isTS) {
      console.log('üì¶ Using TypeScript environment...');
      // ts-node„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
      try {
        require.resolve('ts-node');
        require('ts-node/register');
      } catch (error) {
        console.log('‚ö†Ô∏è  ts-node not found, compiling TypeScript first...');
        execSync('npm run build', { stdio: 'inherit' });
      }
    }

    // „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„ÇØ„É©„Çπ„Çí„Ç§„É≥„Éù„Éº„Éà
    const { database } = require('../src/lib/database/connection');

    // „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„Å®„Çπ„Ç≠„Éº„ÉûÂàùÊúüÂåñ
    console.log('üîå Connecting to database...');
    const db = database.getDatabase();
    console.log('‚úÖ Database connected successfully');

    // „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ„Éë„Çπ
    const migrationDir = path.join(__dirname, '..', 'src', 'lib', 'database', 'migrations');

    // „Éû„Ç§„Ç∞„É¨„Éº„Ç∑„Éß„É≥ÂÆüË°å
    console.log('üîß Running migrations...');
    await database.runMigrations(migrationDir);

    // „Éá„Éº„Çø„Éô„Éº„ÇπÊúÄÈÅ©Âåñ
    console.log('‚ö° Optimizing database...');
    database.optimize();

    // „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
    console.log('üè• Running health check...');
    const healthStatus = database.healthCheck();

    if (healthStatus.status === 'healthy') {
      console.log('‚úÖ Database health check passed');
      console.log(`   - Response time: ${healthStatus.responseTime}ms`);
      console.log(`   - Database size: ${formatBytes(healthStatus.dbSize || 0)}`);
      console.log(`   - Table count: ${healthStatus.tableCount}`);
      console.log(`   - Database path: ${healthStatus.path}`);
    } else {
      console.error('‚ùå Database health check failed:', healthStatus.error);
      process.exit(1);
    }

    console.log('\nüéâ Database migration completed successfully!');
  } catch (error) {
    console.error('\n‚ùå Migration failed:', error.message);
    if (error.cause) {
      console.error('   Cause:', error.cause.message || error.cause);
    }
    process.exit(1);
  }
}

/**
 * „Éê„Ç§„ÉàÊï∞„Çí‰∫∫Èñì„ÅåË™≠„Åø„ÇÑ„Åô„ÅÑÂΩ¢Âºè„Å´„Éï„Ç©„Éº„Éû„ÉÉ„Éà
 */
function formatBytes(bytes) {
  if (bytes === 0) return '0 Bytes';

  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));

  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// „Çπ„ÇØ„É™„Éó„Éà„ÅåÁõ¥Êé•ÂÆüË°å„Åï„Çå„ÅüÂ†¥Âêà„ÅÆ„Åø„É°„Ç§„É≥Èñ¢Êï∞„ÇíÂÆüË°å
if (require.main === module) {
  main().catch((error) => {
    console.error('‚ùå Unexpected error:', error);
    process.exit(1);
  });
}

module.exports = { main };