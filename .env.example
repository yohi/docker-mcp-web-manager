# Docker MCP Web Manager - 環境変数設定例
# このファイルを .env.local (開発環境) または .env.production (本番環境) にコピーして使用してください

# =============================================================================
# 基本設定
# =============================================================================

# 実行環境 (development / production / test)
NODE_ENV=development

# アプリケーションURL (本番環境では実際のドメインに変更)
NEXT_PUBLIC_APP_URL=http://localhost:3000

# サーバーポート
PORT=3000

# =============================================================================
# NextAuth.js 認証設定
# =============================================================================

# NextAuth.js ベースURL (NEXT_PUBLIC_APP_URLと同じ値)
NEXTAUTH_URL=http://localhost:3000

# NextAuth.js シークレットキー (本番環境では必須)
# 生成方法: openssl rand -base64 32
NEXTAUTH_SECRET=your-secret-key-here-change-this-in-production

# JWT有効期限 (秒単位、デフォルト: 24時間)
JWT_EXPIRES_IN=86400

# セッション最大有効期限 (秒単位、デフォルト: 30日)
SESSION_MAX_AGE=2592000

# =============================================================================
# データベース設定
# =============================================================================

# データベース接続URL
# SQLite (開発環境)
DATABASE_URL=sqlite:./data/app.db

# PostgreSQL (本番環境)
# DATABASE_URL=postgresql://username:password@localhost:5432/mcp_manager

# MySQL (代替案)
# DATABASE_URL=mysql://username:password@localhost:3306/mcp_manager

# データベース接続プール設定
DB_CONNECTION_LIMIT=10
DB_CONNECTION_TIMEOUT=30000

# =============================================================================
# Docker MCP CLI 設定
# =============================================================================

# Docker ソケットパス
DOCKER_HOST=unix:///var/run/docker.sock

# Docker API バージョン
DOCKER_API_VERSION=1.41

# Docker操作タイムアウト (ミリ秒)
DOCKER_TIMEOUT=30000

# Docker コマンド実行タイムアウト (ミリ秒)
DOCKER_COMMAND_TIMEOUT=300000

# =============================================================================
# セキュリティ設定
# =============================================================================

# CSRF保護用シークレットキー (本番環境では必須)
# 生成方法: openssl rand -base64 32
CSRF_SECRET_KEY=your-csrf-secret-key-here

# 許可するオリジン (本番環境では実際のドメインに変更)
ALLOWED_ORIGINS=http://localhost:3000,https://your-domain.com

# レート制限設定 (1時間あたりのリクエスト数)
RATE_LIMIT_REQUESTS=1000
RATE_LIMIT_WINDOW=3600

# パスワードハッシュ化のソルトラウンド
BCRYPT_SALT_ROUNDS=12

# セッションクッキー設定
COOKIE_SECURE=false
COOKIE_HTTP_ONLY=true
COOKIE_SAME_SITE=lax

# =============================================================================
# Redis設定 (セッション管理・キャッシュ)
# =============================================================================

# Redis接続URL (オプション)
# REDIS_URL=redis://localhost:6379

# Redis接続設定
# REDIS_HOST=localhost
# REDIS_PORT=6379
# REDIS_PASSWORD=your-redis-password
# REDIS_DB=0

# =============================================================================
# ログ設定
# =============================================================================

# ログレベル (error / warn / info / debug)
LOG_LEVEL=info

# 構造化ログの有効化
LOG_STRUCTURED=true

# ログファイル出力パス
LOG_FILE_PATH=./logs/app.log

# ログファイルの最大サイズ (MB)
LOG_FILE_MAX_SIZE=100

# ログファイルの最大保持数
LOG_FILE_MAX_FILES=10

# 外部ログサービス設定 (オプション)
# LOG_ENDPOINT=https://your-log-service.com/api/logs
# LOG_API_KEY=your-log-api-key

# =============================================================================
# 監視・メトリクス設定
# =============================================================================

# ヘルスチェック間隔 (秒)
HEALTH_CHECK_INTERVAL=30

# メトリクス収集の有効化
METRICS_ENABLED=true

# Prometheus メトリクスポート
PROMETHEUS_PORT=9090

# メトリクス収集間隔 (秒)
METRICS_COLLECTION_INTERVAL=15

# =============================================================================
# SSL/TLS設定 (本番環境)
# =============================================================================

# SSL証明書ファイルパス
# SSL_CERT_PATH=/etc/ssl/certs/cert.pem
# SSL_KEY_PATH=/etc/ssl/private/key.pem

# SSL設定
# SSL_ENABLED=true
# SSL_REDIRECT=true

# =============================================================================
# メール設定 (通知用)
# =============================================================================

# SMTP設定
# SMTP_HOST=smtp.gmail.com
# SMTP_PORT=587
# SMTP_SECURE=false
# SMTP_USER=your-email@gmail.com
# SMTP_PASSWORD=your-app-password

# メール送信者情報
# EMAIL_FROM=noreply@your-domain.com
# EMAIL_FROM_NAME=Docker MCP Web Manager

# =============================================================================
# 外部サービス統合
# =============================================================================

# Bitwarden CLI設定 (オプション)
# BITWARDEN_CLIENT_ID=your-bitwarden-client-id
# BITWARDEN_CLIENT_SECRET=your-bitwarden-client-secret
# BITWARDEN_SERVER_URL=https://vault.bitwarden.com

# Slack通知設定 (オプション)
# SLACK_WEBHOOK_URL=https://hooks.slack.com/services/xxx
# SLACK_CHANNEL=#alerts

# =============================================================================
# バックアップ設定
# =============================================================================

# バックアップの有効化
BACKUP_ENABLED=true

# バックアップスケジュール (cron形式)
BACKUP_SCHEDULE="0 2 * * *"

# バックアップ保持日数
BACKUP_RETENTION_DAYS=30

# バックアップ保存先
BACKUP_STORAGE_PATH=./backups

# =============================================================================
# パフォーマンス設定
# =============================================================================

# Next.js最適化設定
NEXT_TELEMETRY_DISABLED=1

# 静的ファイルキャッシュ期間 (秒)
STATIC_CACHE_MAX_AGE=31536000

# API レスポンスキャッシュ期間 (秒)
API_CACHE_MAX_AGE=300

# 並行処理数制限
CONCURRENT_OPERATIONS_LIMIT=10

# =============================================================================
# 開発環境専用設定
# =============================================================================

# デバッグモード
DEBUG=false

# Hot Reload (開発環境のみ)
FAST_REFRESH=true

# ソースマップ生成 (開発環境のみ)
GENERATE_SOURCEMAP=true

# TypeScript厳密モード
TYPESCRIPT_STRICT_MODE=true

# ESLint自動修正
ESLINT_AUTO_FIX=true

# =============================================================================
# テスト環境設定
# =============================================================================

# テスト用データベース
# TEST_DATABASE_URL=sqlite::memory:

# テスト実行時の並行度
# JEST_WORKERS=4

# テストタイムアウト (ミリ秒)
# TEST_TIMEOUT=30000

# =============================================================================
# Docker Compose 関連設定
# =============================================================================

# PostgreSQL設定 (Docker Composeで使用)
# POSTGRES_DB=mcp_manager
# POSTGRES_USER=mcp_user
# POSTGRES_PASSWORD=secure_password_here

# Redis設定 (Docker Composeで使用)
# REDIS_PASSWORD=redis_password_here

# =============================================================================
# 環境固有の追加設定
# =============================================================================

# カスタム設定がある場合はここに追加
# CUSTOM_SETTING=value

# =============================================================================
# 設定値の説明
# =============================================================================

# 本番環境での重要な変更点:
# 1. NODE_ENV=production に設定
# 2. NEXT_PUBLIC_APP_URL を実際のドメインに変更
# 3. NEXTAUTH_SECRET を安全な値に変更 (openssl rand -base64 32)
# 4. CSRF_SECRET_KEY を安全な値に変更 (openssl rand -base64 32)
# 5. DATABASE_URL をPostgreSQLまたはMySQLに変更
# 6. ALLOWED_ORIGINS を実際のドメインに制限
# 7. SSL設定を有効化 (SSL_ENABLED=true)
# 8. ログレベルを適切に設定 (info または warn)
# 9. Redis設定を追加 (セッション管理とパフォーマンス向上のため)
# 10. メール設定を追加 (通知機能のため)

# セキュリティチェックリスト:
# ✓ シークレットキーをすべて変更済み
# ✓ データベース認証情報を設定済み
# ✓ 許可オリジンを本番ドメインに制限済み
# ✓ SSL/TLS設定を有効化済み
# ✓ レート制限を適切に設定済み
# ✓ ログ設定を適切に設定済み